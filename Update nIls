from tkinter import *  
import tkinter as tk  
from random import *  
from tkinter import messagebox
import random

  

#Definition   

custom_font = ("Arial", 16)                                                             ##Erstellt Text Art "Arial" und text größe 16

def exit_application():  
    if messagebox.askokcancel("Beenden", "Möchtest du TicTacToe wirklich beenden?"):    ##Anzeige ob man beenden möchte
        ws.destroy()                                                                    ##Beendet das fenster ws

def reset_game():  
    ws.destroy()  
    main()                                                                              ##Der Mainloop wird ausgeführt
    
def start_leicht():
    global GegnerAuswahlWindow
   
                                                                                            #alles was im fenster ws passiert wird als globale variable gespeichert                                                                                      ##Easy loop wird au   
def start_Schwer():
    global GegnerAuswahlWindow



def GegnerAuswahl():
    global GegnerAuswahlWindow
    GegnerAuswahlWindow = Tk()
    GegnerAuswahlWindow.title('Gegnerauswahl')

    lokal_button = Button(GegnerAuswahlWindow, text="Lokal spielen", command=start_lokal)
    lokal_button.pack(pady=10)

    Computer_button = Button(GegnerAuswahlWindow, text="Computer Gegner", command=start_computer)
    Computer_button.pack(pady=10)

    GegnerAuswahlWindow.mainloop()
    
def Lokal():
    global Namenseingabe, e1, e2                                                        #Namenseingabe, e1 und e2 werden als globale variable abgespeichert
    Namenseingabe = Tk()                                                                #Das Fenster wird als Namenseingabe gespeichert
    Namenseingabe.geometry("150x150+200+200")                                           #Das Fenster namenseingabe hat die angegebenen Maße
    Label(Namenseingabe, text="Player One").grid(row=0)                                 #Das Label wo drauf steht Player One wird in jeweils untereinander mit row gesetzt                
    Label(Namenseingabe, text="Player Two").grid(row=1)
    buta = Button(Namenseingabe, text="Bestätigen", command=get_names)                  #Button a mit dem Text "Bestätigen löst beim drauf drücken command get_names aus
    buta.grid(row=2, columnspan=2)      

    e1 = Entry(Namenseingabe)                                                           #e1 ist der input der beim Label Player One eingegeben wurde
    e2 = Entry(Namenseingabe)

    e1.grid(row=0, column=1)                                                            #pos von e1 und e2
    e2.grid(row=1, column=1)

def get_names():
    global player1_name, player2_name, Namenseingabe, number
    player1_name = e1.get()                                                            #Player1_name ist das was bei e1 eingegeben wurde
    player2_name = e2.get()
    Namenseingabe.destroy()                     # Schließe das Namenseingabe-Fenster nach der Bestätigung der Namen

    # mainloop hier aufrufen
    Namenseingabe.mainloop()                                                            #der loop der bei der Namenseingabe läuft

def Computer():
    ComputerGegner = Tk()   
    ComputerGegner.geometry("150x150+200+200")
    ComputerGegner.title('Gegnerauswahl')

    Label(ComputerGegner, text="Gegner Schwierigkeit").place(x=25, y=0)

    butLeicht = Button(ComputerGegner, text="Leicht", command=start_leicht())
    butLeicht.place(x=50, y=30)


    butSchwer = Button(ComputerGegner, text="Schwer", command=start_Schwer())
    butSchwer.place(x=50, y=80)

    ComputerGegner.mainloop()

def start_lokal():
    global GegnerAuswahlWindow
    GegnerAuswahlWindow.destroy()                                                       #Wenn Lokal ausgewählt wurde wird das GegnerAuswahlWindow zerstört
    Lokal()                                                                             #und der Lokal loop wird ausgeführt

def start_computer():
    global GegnerAuswahlWindow
    GegnerAuswahlWindow.destroy()
    Computer()




def main():
    global ws
    global counter 

    # Window

    ws = Tk()  
    ws.title('Tic Tac Toe')  

    # Window Size  

    ws.geometry('450x450+700+200')  
    ws.resizable(width=False, height=False)                                                             #Man kann das TTT Fenster nicht verschieben/vergrößern 

      # Anzeige wer 0 ist und wer X ist  

    X_player = player1_name  
    lbl_Spieleranzeige_X = Label(ws, text=f"{X_player} is X", font=("TkDefaultFont", 16))               #X_player = player1_name hiermit wird der Played one X zugeteilt
    lbl_Spieleranzeige_X.place(x=300, y=0)  


    O_player = player2_name  
    lbl_Spieleranzeige_O = Label(ws, text=f"{O_player} is O", font=("TkDefaultFont", 16))  
    lbl_Spieleranzeige_O.place(x=60, y=0)  


    # Anzeige wer dran ist und counter 

    counter = 0

    lbl_name1 = Label(ws, text=f"Current Player: {player1_name}", font=("TkDefaultFont", 16))
    lbl_name1.place(x=150, y=60)



    #switch für current player label
    def switch():
        if lbl_name1 == Label(ws, text=f"Current Player: {player1_name}", font=("TkDefaultFont", 16)):
            lbl_name1.configure(ws, text=f"Current Player: {player2_name}", font=("TkDefaultFont", 16))
        else:
            lbl_name1.configure(ws, text=f"Current Player: {player1_name}", font=("TkDefaultFont", 16))

    #definition buttons

    def cob():
        global counter
        if counter % 2 == 0:
           butb.configure(text="X") 
        else:
            butb.configure(text="O")
        counter += 1
        switch()
        
    def coc(): 
        global counter
        if counter % 2 == 0:
           butc.configure(text="X") 
        else:
            butc.configure(text="O")
        counter += 1
        if butc["state"] == "normal":
            butc["state"] = "disabled"
        else:
            butc["state"] = "normal"
        
    def cod(): 
        global counter
        if counter % 2 == 0:
           butd.configure(text="X") 
        else:
            butd.configure(text="O")
        counter += 1
        if butd["state"] == "normal":
            butd["state"] = "disabled"
        else:
            butd["state"] = "normal"
            
    def coe(): 
        global counter 
        if counter % 2 == 0:
           bute.configure(text="X") 
        else:
            bute.configure(text="O")
        counter += 1
        if bute["state"] == "normal":
            bute["state"] = "disabled"
        else:
            bute["state"] = "normal"
       
    def cof(): 
        global counter 
        if counter % 2 == 0:
           butf.configure(text="X") 
        else:
            butf.configure(text="O")
        counter += 1
        if butf["state"] == "normal":
               butf["state"] = "disabled"
        else:
            butf["state"] = "normal"
    
    def cog(): 
        global counter 
        if counter % 2 == 0:
           butg.configure(text="X") 
        else:
            butg.configure(text="O")
        counter += 1
        if butg["state"] == "normal":
            butg["state"] = "disabled"
        else:
            butg["state"] = "normal"
      
    def coh(): 
        global counter
        if counter % 2 == 0:
           buth.configure(text="X") 
        else:
            buth.configure(text="O")
        counter += 1
        if buth["state"] == "normal":
            buth["state"] = "disabled"
        else:
            buth["state"] = "normal"
      
    def coi(): 
        global counter 
        if counter % 2 == 0:
           buti.configure(text="X") 
        else:
            buti.configure(text="O")
        counter += 1
        if buti["state"] == "normal":
            buti["state"] = "disabled"
        else:
            buti["state"] = "normal"
     
    def coj(): 
        global counter 
        if counter % 2 == 0:
           butj.configure(text="X") 
        else:
            butj.configure(text="O")
        counter += 1
        if butj["state"] == "normal":
            butj["state"] = "disabled"
        else:
            butj["state"] = "normal"


    #buttons platziert 
            
    butb = Button(ws, height = 5, width = 15, command=cob)          
    butb.place(x=50, y=100)  

    butc = Button(ws, height = 5, width = 15, command=coc)  
    butc.place(x=165, y=100)  

    butd = Button(ws, height = 5, width = 15, command=cod)  
    butd.place(x=280, y=100)  

    bute = Button(ws, height = 5, width = 15, command=coe)  
    bute.place(x=50, y=185)  

    butf = Button(ws, height = 5, width = 15, command=cof)  
    butf.place(x=165, y=185)  

    butg = Button(ws, height = 5, width = 15, command=cog)  
    butg.place(x=280, y=185)  

    buth = Button(ws, height = 5, width = 15, command=coh)  
    buth.place(x=50, y=270)  

    buti = Button(ws, height = 5, width = 15, command=coi)  
    buti.place(x=165, y=270)  

    butj = Button(ws, height = 5, width = 15, command=coj)  
    butj.place(x=280, y=270)






# Reset Button  

    butReset = Button(ws, text="Reset", command=reset_game)  
    butReset.place(x=300, y=400)  

  # Exit Button  

    butexit = Button(ws, text="Exit", command=exit_application)  
    butexit.place(x=120, y=400)  

    ws.mainloop()  # mainloop auf das Hauptfenster anwenden

if __name__ == "__main__":
    GegnerAuswahl()
    main()




class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]                                    # bewirkt das, dass Board gestartet wird

    def print_board(self):
        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:           #Innerhalb jeder Zeile werden die Elemente des Spielbretts zuerst in Dreiergruppen
                                                                                    # (da das TicTacToe-Spielbrett 3x3 ist) unterteilt
                                                                                    # Dann werden die Elemente jeder Dreiergruppe verbunden, um eine Zeile des Spielbretts zu erstellen.
                                                                                    # Dies wird mit ' | '.join(row) gemacht, was jedes Element in der Gruppe mit dem Trennzeichen ' | ' verbindet.
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']          # mögliche Spielzüge werden überprüft

    def winning_move(self, symbol):
                                                                                # Überprüfen, ob es eine Gewinnkombination gibt
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],                                    # Horizontale
            [0, 3, 6], [1, 4, 7], [2, 5, 8],                                    # Vertikale
            [0, 4, 8], [2, 4, 6]                                                # Diagonal
        ]
        for combo in winning_combinations:
            if all(self.board[i] == symbol for i in combo):
                return True
        return False

    def make_move(self, position, symbol):
        self.board[position] = symbol

def get_player_move(board):
    while True:
        move = input("Gib deine Position (0-8): ")
        try:
            move = int(move)
            if move in board.available_moves():
                return move
            else:
                print("Ungültiger Zug. Bitte wählen Sie eine verfügbare Position.")
        except ValueError:
            print("Ungültige Eingabe. Bitte geben Sie eine Zahl zwischen 0 und 8 ein.")

def get_ai_move(board):
                                                                                # Strategie des intelligenten Gegners:
                                                                                # Versuche zu gewinnen, ansonsten verhindere das Gegner zu gewinnen
    for move in board.available_moves():
        board.make_move(move, 'O')
        if board.winning_move('O'):
            return move
        board.make_move(move, ' ')
    
    for move in board.available_moves():
        board.make_move(move, 'X')
        if board.winning_move('X'):
            board.make_move(move, 'O')
            return move
        board.make_move(move, ' ')
    
                                                                                # Falls keine Gewinn- oder Blockiermöglichkeit besteht, wähle einen zufälligen Zug
    return random.choice(board.available_moves())

def main():
    game = TicTacToe()
    game.print_board()

    while True:
        player_move = get_player_move(game)
        game.make_move(player_move, 'X')
        game.print_board()

        if game.winning_move('X'):
            print("Herzlichen Glückwunsch! Du hast gewonnen!")                  # Gewinnerkennung wenn man gegen den Computergegner spielt
            break
        elif len(game.available_moves()) == 0:
            print("Unentschieden!")
            break

        ai_move = get_ai_move(game)
        game.make_move(ai_move, 'O')
        game.print_board()

        if game.winning_move('O'):
            print("Der Computer hat gewonnen!")
            break
        elif len(game.available_moves()) == 0:
            print("Unentschieden!")
            break

if __name__ == "__main__":
    main()
